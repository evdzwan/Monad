<div class="pop-out @ContainerClass" tabindex="-1" @onfocusout="Collapse">
    <div class="pop-out-trigger" @onclick="ToggleExpanded">
        @Trigger
    </div>
    <div class="pop-out-content">
        @Content
    </div>
</div>

@code {
    [Parameter, Description("Collapse when focus is lost.")]
    public bool CollapseOnFocusLost { get; set; }

    private string? ContainerClass => ClassList.Create("active", Expanded);

    [Parameter, Description("The part that's visible when <code>Expanded</code> is true.")]
    public RenderFragment? Content { get; set; }

    [Parameter, Description("Controls when <code>Content</code> is visible.")]
    public bool Expanded { get; set; }

    [Parameter, Description("Invoked when the value of <code>Expanded</code> changes.")]
    public EventCallback<bool> ExpandedChanged { get; set; }

    [Parameter, Description("The part that's always visible.")]
    public RenderFragment? Trigger { get; set; }

    private Task Collapse()
        => CollapseOnFocusLost ? SetExpanded(expanded: false) : Task.CompletedTask;

    private Task SetExpanded(bool expanded)
    {
        Expanded = expanded;
        return ExpandedChanged.InvokeAsync(expanded);
    }

    private Task ToggleExpanded()
        => SetExpanded(!Expanded);
}
