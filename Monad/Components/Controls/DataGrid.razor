@using System.Globalization

@attribute [CascadingTypeParameter(nameof(TItem))]
@typeparam TItem

<CascadingValue Value="this" IsFixed>
    @ChildContent
    <Defer>
        <div class="data-grid">
            @foreach (var column in Columns)
            {
                <div class="data-grid-column" style="@GetColumnStyle(column)" />
            }

            <div class="data-grid-header">
                @foreach (var column in Columns)
                {
                    <div class="data-grid-cell">
                        @column.HeaderContent
                    </div>
                }
            </div>

            @if (Virtualize)
            {
                <Virtualize Context="item" Items="Items is ICollection<TItem> items ? items : Items?.ToArray()" ItemsProvider="VirtualizeItemsProvider" OverscanCount="OverscanCount">
                    <ItemContent>
                        <div class="data-grid-row @GetRowClass(item)" @onclick="() => ToggleSelection(item)" @key="item">
                            @foreach (var column in Columns)
                            {
                                <div class="data-grid-cell">
                                    @column.CellContent(item)
                                </div>
                            }
                        </div>
                    </ItemContent>
                    <Placeholder>
                        <div class="data-grid-row">
                            @foreach (var column in Columns)
                            {
                                <div class="data-grid-cell">
                                    @column.Placeholder
                                </div>
                            }
                        </div>
                    </Placeholder>
                </Virtualize>
            }
            else
            {
                foreach (var item in Items ?? [])
                {
                    <div class="data-grid-row @GetRowClass(item)" @onclick="() => ToggleSelection(item)" @key="item">
                        @foreach (var column in Columns)
                        {
                            <div class="data-grid-cell">
                                @column.CellContent(item)
                            </div>
                        }
                    </div>
                }
            }
        </div>
    </Defer>
</CascadingValue>

@code {
    [Parameter, Description("Place columns here. Columns must derive from <code>DataGridColumn</code>.")]
    public RenderFragment? ChildContent { get; set; }

    private List<DataGridColumn<TItem>> Columns { get; } = [];

    [Parameter, Description("Fixed collection that determines the grid's rows.")]
    public IEnumerable<TItem>? Items { get; set; }

    [Parameter, Description("Delegate called when data is requested, used for data virtualization. Only works when <code>Virtualize</code> is true.")]
    public DataGridItemsProvider<TItem>? ItemsProvider { get; set; }

    [Parameter, Description("When virtualizing, controls how many out-of-view items are loaded. Defaults to <code>3</code>.")]
    public int OverscanCount { get; set; } = 3;

    [CascadingParameter]
    private ISelection<TItem>? Selection { get; set; }

    [Parameter, Description("Enabled UI virtualization when true.")]
    public bool Virtualize { get; set; }

    private int VirtualizeItemCount { get; set; }

    private ItemsProviderDelegate<TItem>? VirtualizeItemsProvider => ItemsProvider is not { } provider ? null : async request =>
    {
        var result = await provider(new(request.StartIndex, request.Count, request.CancellationToken));
        var items = result.Items;

        return new(items, result switch
        {
            { TotalItemCount: { } count } => count,
            { ReachedEnd: true } => VirtualizeItemCount = request.StartIndex + items.Count(),
            _ => VirtualizeItemCount = Math.Max(VirtualizeItemCount, request.StartIndex + request.Count + OverscanCount)
        });
    };

    internal void AddColumn(DataGridColumn<TItem> column)
        => Columns.Add(column);

    private string GetColumnStyle(DataGridColumn<TItem> column)
    {
        return StyleList.Create("width", column.Width switch
        {
            { Unit: SizeUnit.Auto } size => "auto",
            { Unit: SizeUnit.Custom } size => size.Value,
            { Unit: SizeUnit.Exact } size => $"{size.Magnitude.ToString(CultureInfo.InvariantCulture)}px",
            { Unit: SizeUnit.Fill } size => $"calc({size.Magnitude} / {Columns.Where(c => c.Width.Unit == SizeUnit.Fill).Sum(c => c.Width.Magnitude)} * 100%)",
            { } size => throw new NotSupportedException($"Column width '{size}' is not supported")
        }).Add("min-width", $"{column.Width.Magnitude.ToString(CultureInfo.InvariantCulture)}px", column.Width.Unit == SizeUnit.Exact);
    }

    private string GetRowClass(TItem item)
        => ClassList.Create("selectable", Selection is not null)
                    .Add("active", Selection is { } selection && selection.IsActive(item));

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        var prevItemsProvider = ItemsProvider;
        await base.SetParametersAsync(parameters);
        if (prevItemsProvider != ItemsProvider)
        {
            VirtualizeItemCount = 0;
        }
    }

    private void ToggleSelection(TItem item)
        => Selection?.Toggle(item);
}
