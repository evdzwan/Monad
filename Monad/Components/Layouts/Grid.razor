<CascadingValue Value="@this" IsFixed>
    @ChildContent
    <Defer>
        <div class="grid" style="@ContainerStyle">
            @foreach (var cell in Cells)
            {
                <div class="grid-cell" style="@GetCellStyle(cell)">
                    @cell.ChildContent
                </div>
            }
        </div>
    </Defer>
</CascadingValue>

@code {
    internal List<GridCell> Cells { get; } = [];

    internal List<GridColumn> Columns { get; } = [];

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    private string ContainerStyle => StyleList.Create("grid-template-columns", GetTemplateColumns())
                                              .Add("grid-template-rows", GetTemplateRows());

    private static string GetCellStyle(GridCell cell)
        => StyleList.Create("grid-column", $"{cell.X + 1} / span {cell.SpanX}")
                    .Add("grid-row", $"{cell.Y + 1} / span {cell.SpanY}");

    private string? GetTemplateColumns()
        => Columns.Count > 0 ? string.Join(' ', Columns.Select(column => column.Width)) : null;

    private string? GetTemplateRows()
        => Rows.Count > 0 ? string.Join(' ', Rows.Select(row => row.Height)) : null;

    internal List<GridRow> Rows { get; } = [];

    protected override void OnParametersSet()
    {
        if (Cells.Count > 0)
        {
            var maxX = Cells.Max(cell => cell.X + cell.SpanX);
            while (Columns.Count < maxX)
            {
                Columns.Add(new());
            }

            var maxY = Cells.Max(cell => cell.Y + cell.SpanY);
            while (Rows.Count < maxY)
            {
                Rows.Add(new());
            }
        }
    }
}
