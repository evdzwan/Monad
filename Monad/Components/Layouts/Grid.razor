<CascadingValue Value="@this" IsFixed>
    @ChildContent
    <Defer>
        <div class="grid" style="@ContainerStyle">
            @foreach (var cell in Cells)
            {
                <div class="grid-cell" style="@GetCellStyle(cell)">
                    @cell.ChildContent
                </div>
            }
        </div>
    </Defer>
</CascadingValue>

@code {
    private List<GridCell> Cells { get; } = [];

    private List<GridColumn> Columns { get; } = [];

    [Parameter, Description("Content to be rendered.")]
    public RenderFragment? ChildContent { get; set; }

    private string ContainerStyle => StyleList.Create("grid-template-columns", GetTemplateColumns())
                                              .Add("grid-template-rows", GetTemplateRows());

    private List<GridRow> Rows { get; } = [];

    internal void AddCell(GridCell cell)
        => Cells.Add(cell);

    internal void AddColumn(GridColumn column)
        => Columns.Add(column);

    internal void AddRow(GridRow row)
        => Rows.Add(row);

    private string? ConvertSize(Size size)
    {
        return size switch
        {
            { Unit: SizeUnit.Auto } => "auto",
            { Unit: SizeUnit.Custom } => size.Value,
            { Unit: SizeUnit.Exact } => $"{size.Magnitude}px",
            { Unit: SizeUnit.Fill } => $"{size.Magnitude}fr",
            _ => throw new NotImplementedException($"Column width {size} is not supported")
        };
    }

    private static string GetCellStyle(GridCell cell)
        => StyleList.Create("grid-column", $"{cell.X + 1} / span {cell.SpanX}")
                    .Add("grid-row", $"{cell.Y + 1} / span {cell.SpanY}");

    private string? GetTemplateColumns()
    {
        UpdateColumns();
        return Columns.Count > 0 ? string.Join(' ', Columns.Select(column => ConvertSize(column.Width))) : null;
    }

    private string? GetTemplateRows()
        => Rows.Count > 0 ? string.Join(' ', Rows.Select(row => ConvertSize(row.Height))) : null;

    private void UpdateColumns()
    {
        var maxX = Cells.Count > 0 ? Cells.Max(cell => cell.X + cell.SpanX) : 0;
        while (Columns.Count < maxX)
        {
            Columns.Add(new());
        }
    }
}
