<CascadingValue Value="@this" IsFixed>
    @ChildContent
    <Defer>
        <div class="grid" style="@ContainerStyle">
            @foreach (var cell in Cells)
            {
                <div class="grid-cell" style="@GetCellStyle(cell)">
                    @cell.ChildContent
                </div>
            }
        </div>
    </Defer>
</CascadingValue>

@code {
    internal List<GridCell> Cells { get; } = [];

    internal List<GridColumn> Columns { get; } = [];

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    private string ContainerStyle => StyleList.Create("grid-template-columns", GetTemplateColumns())
                                              .Add("grid-template-rows", GetTemplateRows());

    private static string GetCellStyle(GridCell cell)
        => StyleList.Create("grid-column", $"{cell.X + 1} / span {cell.SpanX}")
                    .Add("grid-row", $"{cell.Y + 1} / span {cell.SpanY}");

    private string? GetTemplateColumns()
    {
        UpdateColumns();
        return Columns.Count > 0 ? string.Join(' ', Columns.Select(column => column.Width)) : null;
    }

    private string? GetTemplateRows()
    {
        UpdateRows();
        return Rows.Count > 0 ? string.Join(' ', Rows.Select(row => row.Height)) : null;
    }

    internal List<GridRow> Rows { get; } = [];

    private void UpdateColumns()
    {
        var maxX = Cells.Count > 0 ? Cells.Max(cell => cell.X + cell.SpanX) : 0;
        while (Columns.Count < maxX)
        {
            Columns.Add(new());
        }
    }

    private void UpdateRows()
    {
        var maxY = Cells.Count > 0 ? Cells.Max(cell => cell.Y + cell.SpanY) : 0;
        while (Rows.Count < maxY)
        {
            Rows.Add(new());
        }
    }
}
