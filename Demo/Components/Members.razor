@using System.Reflection

<div class="members">
    <Grid>
        <GridColumn />
        <GridColumn />
        <GridColumn />
        <GridColumn Width="Size.Fill()" />

        @if (GetMembers().OrderByDescending(m => m.Scope).ThenBy(m => m.Name).ToArray() is { Length: > 0 } members)
        {
            foreach (var (member, index) in members.Select((m, i) => (m, i)))
            {
                <GridCell X="0" Y="index"><code>@member.Scope</code></GridCell>
                <GridCell X="1" Y="index"><code>@member.Name</code></GridCell>
                <GridCell X="2" Y="index"><code>@member.Type</code></GridCell>
                <GridCell X="3" Y="index">@((MarkupString)member.Description)</GridCell>
            }
        }
        else
        {
            <GridCell SpanX="3">
                <i>Type does not have any members.</i>
            </GridCell>
        }
    </Grid>
</div>

@code {
    [Parameter, EditorRequired]
    public required Type Context { get; set; }

    private IEnumerable<Member> GetMembers()
    {
        foreach (var member in Context.GetMembers(BindingFlags.DeclaredOnly | BindingFlags.Instance | BindingFlags.Public | BindingFlags.Static).OrderBy(m => m.Name))
        {
            if (member.GetCustomAttribute<DescriptionAttribute>() is { } attribute)
            {
                yield return new(member, attribute);
            }
        }
    }

    private readonly record struct Member(MemberInfo Info, DescriptionAttribute Attribute)
    {
        private static readonly NullabilityInfoContext _context = new();

        public string Description => Attribute.Description;

        public string Name => Info switch
        {
            MethodInfo method => GetMethodName(method),
            _ => Info.Name
        };

        public string Scope => Info switch
        {
            MethodInfo method => method.IsStatic ? "Method (static)" : "Method",
            PropertyInfo property => property.GetMethod?.IsStatic == true ? "Property (static)" : "Property",
            _ => throw new NotSupportedException($"Member type '{Info.MemberType}' is not supported")
        };

        public string Type => Info switch
        {
            MethodInfo method => method.ReturnType.Name,
            PropertyInfo property => GetPropertyType(property),
            _ => throw new NotSupportedException($"Member type '{Info.MemberType}' is not supported")
        };

        private static string GetMethodName(MethodInfo method)
            => $"{method.Name}({string.Join(", ", method.GetParameters().Select(p => p.Name))})";

        private static string GetPropertyType(PropertyInfo property)
        {
            var type = GetTypeName(property.PropertyType);
            var nullabilityInfo = _context.Create(property);
            return nullabilityInfo.WriteState is NullabilityState.Nullable ? $"{type}?" : type;
        }

        private static string GetTypeName(Type type)
            => $"{type.Name.Split('`')[0]}{(type.IsGenericType ? $"<{string.Join(',', type.GetGenericArguments().Select(GetTypeName))}>" : string.Empty)}";
    }
}
