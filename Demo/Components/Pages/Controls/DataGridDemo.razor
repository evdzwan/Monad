@page "/controls/datagrid"
@using System.Collections.ObjectModel

<PageTitle>DataGrid</PageTitle>
<h2>DataGrid</h2>
<p>
    Use <code>DataGrid</code> to display (large) sets of data in a tabular form.
    Surround the grid with a <code>Scroller</code> component to enable scrolling.
</p>

<h4>Static</h4>
<p>
    Use the <code>Items</code> parameter to provide the component with rows.
    The <code>DataGrid</code> doesn't virtualize by default, so be careful when displaying large amounts of data.
</p>
<p>
    Columns are added using <code>DataGridExpressionColumn</code>, <code>DataGridTemplateColumn</code>, or any other type that derives from <code>DataGridColumn</code>.
    Columns have a width of <code>Size.Auto</code> by default, but can be set to fill all remaining space, as shown below.
</p>
<p>
    Note that the first and third column don't have a <code>Title</code> parameter set.
    That's because in those cases the <code>Value</code> expression is evaluated and the property's name is used as a default.
</p>
<div class="data-grid-example">
    <DataGrid Items="Items.Take(20)">
        <DataGridExpressionColumn Value="item => item.Id" />
        <DataGridExpressionColumn Value="item => item.Id % 2 == 0" Title="Even?" />
        <DataGridExpressionColumn Value="item => item.Text" Width="Size.Fill()" />
        <DataGridTemplateColumn Context="item" Title="Random symbol">
            <span>
                <span style="font-family: Symbol">@((char)item.RandomValue)</span>
                (@item.RandomValue)
            </span>
        </DataGridTemplateColumn>
    </DataGrid>
</div>
<Example Identifier="Controls.DataGrid.Static" />

<h4>Virtualization</h4>
<p>
    Enable UI virtualization by adding the <code>Virtualize</code> parameter.
    Use <code>ItemsProvider</code> to enable data virtualization as well.
    Use <code>OverscanCount</code> to control how many out-of-view items are loaded.
</p>
<p>
    In this case, not yet loaded data will be shown as empty rows.
    You can further control this behavior for each cell by setting the <code>Placeholder</code> parameter on <code>DataGridColumn</code>.
</p>
<div class="data-grid-example">
    <DataGrid ItemsProvider="ItemsProvider" OverscanCount="25" Virtualize>
        <DataGridExpressionColumn Value="item => item.Id" Width="Size.Exact(sizeInPixels: 50.5)">
            <Placeholder>
                <span>...</span>
            </Placeholder>
        </DataGridExpressionColumn>
        <DataGridExpressionColumn Value="item => item.Id % 2 == 0" Title="Even?" />
        <DataGridExpressionColumn Value="item => item.Text" Width="Size.Fill()" />
        <DataGridTemplateColumn Context="item" Title="Random symbol">
            <span>
                <span style="font-family: Symbol">@((char)item.RandomValue)</span>
                (@item.RandomValue)
            </span>
        </DataGridTemplateColumn>
    </DataGrid>
</div>
<Example Identifier="Controls.DataGrid.Virtualizing" />

<h4>Selection</h4>
<p>
    Enable selection by wrapping the grid in a <code>Selector</code> component.
    The <code>DataGrid</code> automatically hooks up to its selection mechanics.
</p>
<div class="data-grid-example">
    <Selector Selection="SelectedItems" Multiple>
        <DataGrid Items="Items" Virtualize>
            <DataGridExpressionColumn Value="item => item.Id" />
            <DataGridExpressionColumn Value="item => item.Text" Width="Size.Fill()" />
        </DataGrid>
    </Selector>
</div>
<Example Identifier="Controls.DataGrid.Selection" />

<h4>Styling</h4>
<p style="margin-bottom: 0">
    All parts of <code>DataGrid</code> can be styled using CSS classes and the <code>::deep</code> selector.
    The available CSS classes are listed below with an explanation.
</p>
<Example Identifier="Controls.DataGrid.Styling" Type="css" />

<h4>Members of <code>DataGrid&lt;TItem&gt;</code></h4>
<Members Context="typeof(DataGrid<>)" />

<h4>Members of <code>DataGridColumn&lt;TItem&gt;</code></h4>
<Members Context="typeof(DataGridColumn<>)" />

<h4>Members of <code>DataGridExpressionColumn&lt;TItem, TValue&gt;</code></h4>
<Members Context="typeof(DataGridExpressionColumn<,>)" />

<h4>Members of <code>DataGridTemplateColumn&lt;TItem&gt;</code></h4>
<Members Context="typeof(DataGridTemplateColumn<>)" />

@code {
    private Item[] Items { get; } = Enumerable.Range(1, 1_000).Select(id => new Item(id)).ToArray();

    private ObservableCollection<Item> SelectedItems { get; } = [];

    private DataGridItemsProvider<Item> ItemsProvider => async request =>
    {
        await Task.Delay(1000);
        var items = Items.Skip(request.StartIndex).Take(request.Count).ToArray();
        return new(items, reachedEnd: items.Length < request.Count);
    };

    protected override void OnInitialized()
    {
        SelectedItems.Add(Items[2]);
        SelectedItems.CollectionChanged += (sender, e) => StateHasChanged();
    }

    private sealed class Item(int id)
    {
        public int Id { get; } = id;

        public int RandomValue { get; } = 1 + Random.Shared.Next(0xFF);

        public string Text { get; } = $"Example item {id}";
    }
}
