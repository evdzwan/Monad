@typeparam TItem where TItem : notnull
@inherits Chart<TItem>

<div class="pie-chart">
    <div class="pie @ContainerClass" style="@ContainerStyle">
        @foreach (var data in ItemsData)
        {
            <div class="pie-slice @GetItemClass(data)" style="@GetItemStyle(data)" @onclick="() => ActivateItem(data.Item)" @key="data.Item" />
        }
    </div>
</div>

@code {
    private string ContainerClass => ClassList.Create("selectable", HasSelection);

    private string ContainerStyle => StyleList.Create("--total", ItemsData.Sum(data => data.Value).ToString(InvariantCulture));

    private ItemData[] ItemsData { get; set; } = [];

    private string GetItemClass(ItemData data)
        => ClassList.Create("active", IsItemActive(data.Item));

    private string GetItemStyle(ItemData data)
        => StyleList.Create("background-color", data.Color)
                    .Add("--offset", data.Offset.ToString(InvariantCulture))
                    .Add("--value", data.Value.ToString(InvariantCulture));

    protected override void OnParametersSet()
    {
        var items = Items.ToArray();
        var itemTitles = items.Select(ItemTitle).ToArray();
        var itemValues = items.Select(ItemValue).ToArray();
        ItemsData = items.Select((item, index) => new ItemData(item, itemValues.Take(index).Sum(), itemValues[index], itemTitles[index], GenerateRandomColor())).ToArray();
    }

    private sealed record ItemData(TItem Item, double Offset, double Value, string? Title, string Color);
}
